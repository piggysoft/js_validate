/*
 * CakePHP jQuery Validation Plugin
 * Copyright (c) 2009 Matt Curry
 * www.PseudoCoder.com
 * http://github.com/mcurry/cakephp/tree/master/helpers/validation
 * http://sandbox2.pseudocoder.com/demo/validation
 *
 * @author      mattc <matt@pseudocoder.com>
 * @license     MIT
 *
 */
 
/* Notes */
    * This helper requires jQuery. Sorry to all you Prototype/script.aculo.us users.

/* ReadMe */
   1. You'll need a working version of CakePHP installed. This has been teston on 1.2.2.8120 Stable.
   2. Download jQuery 1.3.2 or later and put it in somewhere in your /app/webroot/js.
   3. Download the plugin and put it in /app/plugin/cakephp_plugin_validation
   5. Optionally, put jquery.validation.min.js somewhere in your /app/webroot/js.
   6. Include the helper in any controller that will need it.
      var $helpers = array('CakephpPluginValidation.Validation');

   7. Include the Javascript files in your view. 
      If you are already using jQuery throughout your app, and it is included in your layout, you can removed it from the line below.
      If you copied jquery.validation.min.js to your /app/webroot/js:
      $javascript->link(array('jquery', 'jquery.validation.min'), false); 
      Alternatively, you can access use the version in the plugin directory:
      $javascript->link(array('jquery', '/cakephp_plugin_validation/js/jquery.validation'), false); 
      The downside to using this method is the javascript is loaded through PHP, which isn't as fast.

   8. Then in the views for your forms, call the helper. Replace "Model" with the model name for the form.
      echo $validation->rules('Model');

   9. You can pass a second param to the method call above, which is an array of options. The available options are:
          * formId - The specific form id if you have multiple forms on a page and only want to target one.
          * inline - Setting this to true will return the ouput for direct echoing. 
                     If false then the codeblock will be added to the output of $scripts_for_layout for display in the HEAD tag.
          * messageId - The id of a div where all the validation messages will be displayed. 
  10. If a particular field fails the input will be marked with the css class "form-error" 
      and the message will be added after the field with the class "error-message". 
      This is the same as Cake would do if you submitted to the server. 
      In addition you can specify a div messageId and all the messages will be shown there as well.
        <div id="message"></div>  

Tips
    * I wrote an article for PHPArch about JavaScript validation(http://c7y.phparch.com/c/entry/1/art,improved_javascript_validation), which raised some concerns that this approach may reveal too much about an application's security. If this is a concern for you, but you still want to use this helper, there is an option to whitelist rules can be applied on the client side. To use to this feature set the list in your bootstrap.php:
        Configure::write('javascriptValidationWhitelist', array('alphaNumeric', 'minLength'));  